---

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

stages:
  - 🧪 test
  - 📋 lint
  - 🏗 build
  - 📦 publish
  - 🚀 deploy
  - 📣 release

variables:
  # Image
  UV_VERSION: "0.8.2"
  PYTHON_VERSION: "3.11"

  # App
  STATIC_SITE_PATH: "$CI_PROJECT_DIR/_site"
  TASK_BIN: "uv run task"

  # Packaging
  PACKAGE_ACCESS_IDENTIFIER: "gitlab-ci"

  # Secrets (set in GitLab CI/CD settings)
  # - PROJECT_ACCESS_TOKEN
  #   - https://gitlab.data.bas.ac.uk/MAGIC/lantern-exp/-/settings/access_tokens
  #   - (name: 'gitlab_ci' scope: 'read_api', role: 'reporter')
  # - SAFETY_API_KEY
  #   - https://start.1password.com/open/i?a=QSB6V7TUNVEOPPPWR6G7S2ARJ4&v=k34cpwfkqaxp2r56u4aklza6ni&i=swbuhnii4ego6qycyqknvtk7gi&h=magic.1password.eu

image: mcr.microsoft.com/playwright/python:v1.54.0-noble

.before_script_python: &before_script_python
  # setup UV
  - curl -LsSfo uv.tar.gz https://github.com/astral-sh/uv/releases/download/$UV_VERSION/uv-x86_64-unknown-linux-gnu.tar.gz
  - tar -xzf uv.tar.gz
  - mv uv-x86_64-unknown-linux-gnu/uv uv-x86_64-unknown-linux-gnu/uvx /usr/local/bin
  - uv --version

.before_script_testing: &before_script_testing
  - *before_script_python

  # setup locale for playwright
  - apt-get update
  - apt-get install -y locales
  - sed -i 's/# en_GB.UTF-8 UTF-8/en_GB.UTF-8 UTF-8/' /etc/locale.gen
  - locale-gen
  - export LANG=en_GB.UTF-8
  - export LANGUAGE=en_GB:en
  - export LC_ALL=en_GB.UTF-8

  # setup app deps
  - uv sync --frozen --all-groups --python $PYTHON_VERSION
  # start static site for e2e tests
  - python -m http.server 8123 --directory "$STATIC_SITE_PATH" &

# Jobs

pytest:
  stage: 🧪 test
  needs: []
  before_script:
    - *before_script_testing
  script:
    - $TASK_BIN ci-test
  coverage: '/Total coverage: \d+\.\d+/'
  artifacts:
    when: always
    reports:
      junit: test-results.xml
    paths:
      - htmlcov
    expire_in: 1 month
  rules:
    -
      changes:
        - 'src/**/*.py'
        - 'tests/**/*.py'
        - 'pyproject.toml'
        - 'uv.lock'
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

ruff:
  stage: 📋 lint
  needs: []
  before_script:
    - *before_script_python
  script:
    - $TASK_BIN lint $RUFF_TARGETS
    - $TASK_BIN format --check $RUFF_TARGETS
    - $TASK_BIN types
  rules:
    -
      changes:
        - '**/*.py'
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

safety:
  stage: 📋 lint
  needs: []
  before_script:
    - *before_script_python
  script:
    - uv run --only-group dev --frozen safety --stage cicd scan --detailed-output
  rules:
    -
      changes:
        - '.safety-policy.yml'
        - 'uv.lock'
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

build:
  stage: 🏗 build
  needs: []
  before_script:
    - *before_script_python
  script:
    - uv build
  artifacts:
    paths:
      - dist/
    expire_in: 1 month
  rules:
    -
      changes:
        - '**/*.py'
        - 'pyproject.toml'
        - 'uv.lock'
      if: '$CI_COMMIT_BRANCH != "main" || $CI_COMMIT_TAG != null'

publish:
  stage: 📦 publish
  needs:
    - job: build
      artifacts: true
  before_script:
    - *before_script_python
  script:
    - uv publish --index=self --username=gitlab-ci-token --password=$CI_JOB_TOKEN
  retry:
    max: 2
  rules:
    - if: '$CI_COMMIT_TAG != null'

prerelease:
  stage: 📦 publish
  needs: []
  before_script:
    - *before_script_python
    - uv sync --frozen --group=dev --python $PYTHON_VERSION
    - $TASK_BIN release prerelease
    - echo "DEPLOY_APP_VERSION=$("$TASK_BIN" version)" >> build.env
  script:
    - uv build
    - uv publish --index=self --username=gitlab-ci-token --password=$CI_JOB_TOKEN
  retry:
    max: 2
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null'

gitlab_release:
  stage: 📣 release
  needs:
    - job: publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - apk add --no-cache curl jq

    - export TAG_NO_PREFIX=$(echo $CI_COMMIT_TAG | cut -c 2-)
    # for a string v0.8.13, replace last digit to always be 0
    - export TAG_NO_PATCH=$(echo $CI_COMMIT_TAG | sed 's/[0-9]$/0/')

    - 'curl -s -H "Authorization: Bearer $PROJECT_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages" > data.json'
    - export PACKAGE_ID=$(cat data.json | jq -r ".[] | select(.version==\"$TAG_NO_PREFIX\") | .id") && rm data.json

    - 'curl -s -H "Authorization: Bearer $PROJECT_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/milestones?title=$CI_COMMIT_TAG" > milestone_exact.json'
    - 'curl -s -H "Authorization: Bearer $PROJECT_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/milestones?title=$TAG_NO_PATCH" > milestone-minor.json'
    - export MILESTONE_TITLE_EXACT=$(cat milestone_exact.json | jq -r ".[0] | .title") && rm milestone_exact.json
    - export MILESTONE_TITLE_MINOR=$(cat milestone-minor.json | jq -r ".[0] | .title") && rm milestone-minor.json
    - >
      if [ "$MILESTONE_TITLE_EXACT" != "null" ]; then
          export MILESTONE_TITLE=$MILESTONE_TITLE_EXACT
      elif [ "$MILESTONE_TITLE_MINOR" != "null" ]; then
          export MILESTONE_TITLE=$MILESTONE_TITLE_MINOR
      else
          export MILESTONE_TITLE=""
      fi

    - curl -s -L -O https://github.com/taiki-e/parse-changelog/releases/download/v0.6.8/parse-changelog-x86_64-unknown-linux-musl.tar.gz
    - tar -xzf parse-changelog-x86_64-unknown-linux-musl.tar.gz -C /usr/local/bin/
    - parse-changelog CHANGELOG.md "$TAG_NO_PREFIX" > changelog.txt

    # the release section cannot access variables defined in a script but can read from a file :|
    - echo "$TAG_NO_PREFIX" > tag_no_prefix.txt
    - echo "$PACKAGE_ID" > package_id.txt
    - echo "$MILESTONE_TITLE" > milestone_title.txt
  script:
    - echo 'releasing'
  release:
    name: $(cat tag_no_prefix.txt)
    tag_name: $CI_COMMIT_TAG
    milestones:
      - $(cat milestone_title.txt)
    description: $(cat changelog.txt)
    assets:
      links:
        - name: README
          url: '$CI_PROJECT_URL/-/blob/$CI_COMMIT_TAG/README.md'
          link_type: runbook
        - name: Python Package
          url: '$CI_PROJECT_URL/-/packages/$(cat package_id.txt)'
          link_type: package
  rules:
    - if: $CI_COMMIT_TAG

# TODO: github_release
