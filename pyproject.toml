[project]
name = "lantern"
version = "0.2.1"
description = "Prototype data catalogue for BAS discovery metadata."
readme = "README.md"
license = "MIT"
authors = [
    { name = "Felix Fennell", email = "felnne@bas.ac.uk" }
]
requires-python = ">=3.11"
dependencies = [
    "bas-metadata-library>=0.15.3",
    "beautifulsoup4>=4.13.4",
    "bleach>=6.2.0",
    "boto3>=1.38.46",
    "boto3-stubs[s3]>=1.38.46",
    "cattrs>=25.1.1",
    "deepdiff>=8.5.0",
    "environs>=14.2.0",
    "humanize>=4.12.3",
    "inquirer>=3.4.0",
    "jinja2>=3.1.6",
    "joblib>=1.5.1",
    "jsonschema>=4.23.0",
    "markdown>=3.8.2",
    "markdown-gfm-admonition>=0.1.1",
    "python-gitlab>=6.0.0",
    "requests>=2.32.4",
    "sentry-sdk>=2.32.0",
]

[dependency-groups]
dev = [
    "dunamai>=1.25.0",
    "pymarkdownlnt>=0.9.32",
    "pytailwindcss>=0.2.0",
    "ruff>=0.12.4",
    "safety>=3.5.2",
    "taskipy>=1.14.1",
    "ty>=0.0.1a19",
    "types-lxml>=2025.3.30",
]
test = [
    "moto[s3]>=5.1.6",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-env>=1.1.5",
    "pytest-freezer>=0.4.9",
    "pytest-mock>=3.14.1",
    "pytest-playwright>=0.7.0",
    "pytest-random-order>=1.2.0",
    "pytest-recording>=0.13.4",
    "pytest-unordered>=0.7.0",
]

[[tool.uv.index]]
name = "self"
url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1355/packages/pypi/simple"
publish-url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1355/packages/pypi"
explicit = true

[tool.taskipy.variables]
docs_targets = "docs/"
types_targets = "src/"
targets = "src/ tasks/ tests/"
cov_options = "--cov --cov-report=html"

[tool.taskipy.tasks]
# generic dev
format = { cmd = "ruff format {targets}", help = "Lint app", use_vars = true }
lint = { cmd = "ruff check {targets}", help = "Lint app", use_vars = true }
types = { cmd = "ty check {types_targets}", help = "Type check app", use_vars = true }
markdown = { cmd = "pymarkdown scan --recurse {docs_targets}", help = "Lint docs", use_vars = true }
pre-commit = { cmd = "pre-commit run --all-files", help = "Run pre-commit hooks on all files" }
test = { cmd = "pytest", help = "Run tests" }
test-cov = { cmd = "pytest {cov_options}", help = "Run tests with coverage", use_vars = true }
test-reset = { cmd = "pytest --cache-clear", help = "Reset pytest cache and run tests" }
safety = { cmd = "safety scan --detailed-output", help = "Check for insecure dependencies" }
# CI
ci-test = { cmd = "pytest {cov_options} -o junit_family=xunit2 --junitxml=test-results.xml --continue-on-collection-errors", help = "Called by CI", use_vars = true }
# app dev
release = { cmd = "python -m tasks.release", help = "Prepapre app release" }
config-init = { cmd = "op inject --in-file .env.tpl --out-file .env", help = "Initialise config file" }
check-config = { cmd = "python -m tasks.config", help = "Check app config" }
tailwind = { cmd = "python -m tasks.tailwind", help = "Regenerate tailwind styles" }
css-audit = { cmd = "python -m tasks.css_audit", help = "List CSS styles used in app templates" }
build-test-records = { cmd = "python tests/scripts/build_test.py", help = "Build test records as a catalogue site" }
# fake CLI
version = { cmd = "python -m tasks.version", help = "Show app version" }
load-records = { cmd = "python -m tasks.records_load", help = "Copy externally edited records into import directory" }
select-records = { cmd = "python -m tasks.records_select", help = "Copy records from cache to import directory for editing" }
import-records = { cmd = "python -m tasks.records_import", help = "Import records from directory" }
build-records = { cmd = "python -m tasks.records_build", help = "Build records as a catalogue site" }
verify-records = { cmd = "python -m tasks.records_verify", help = "Verify static site contents" }
bootstrap-records = { cmd = "python -m tasks.records_bootstrap", help = "Bootstrap a new records repo" }
records-workflow = { cmd = "python -m tasks.records_workflow", help = "Combined records import and build workflow" }
serve = { cmd = "python -m http.server 9000 --directory export", help = "Serve local catalogue site" }

[tool.ruff]
src = ["src"]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
#   A | builtins (variables named after builtin names)
# ANN | annotations (type hints)
#   B | bug-bear (bad code)
#  B9 | bug-bear opinionated (additional bad code)
# C90 | mccabe (code complexity)
#  C4 | comprehensions (list/dict/set comprehensions)
#   D | pydocstyle (docstring)
# DTZ | datetimez (date/time)
#   E | pycodestyle errors (PEP8)
#  EM | errmsg (exceptions)
# ERA | eraticate (comments)
#   F | pyflakes (invalid/bad code)
#  FA | uture-annotations (type hints)
#   I | isort (import ordering)
#   N | pep8-naming (PEP8)
#  PT | pytest-style (tests)
# PTH | use-pathlib (old syntax)
# RET | return (return statements)
# RUF | ruff (other)
#   S | bandit (static security)
# SIM | simplicity (code complexity)
#  TD | todos (comments)
# TRY | tryceratops (exceptions)
#  UP | pyupgrade (old syntax)
#   W | pycodestyle warnings (PEP8)
select = ["A", "ANN", "B", "B9", "C90", "C4", "D", "DTZ", "E", "EM", "ERA", "F", "FA", "I", "N", "PT", "PTH", "RET", "RUF", "S", "SIM", "TD", "TRY", "UP", "W"]

#   D100 | for avoding module level docstrings
#   D104 | for avoding package level docstrings
#   D203 | for requring blank line before classes (which looks silly)
#   D212 | for docstring requring multi-line comments to start on first line (which looks silly)
#   D401 | for requring imperative mood in docstrings (finally had enough, too annoying)
#   D402 | for docstring that can't resemble their signatures (despite them being completely different)
#   E501 | for bug-bear compatibility (as B905 overrides line length checks)
#  PT001 | for `@pytest.fixture` parentheses (as it's unstable/unreliable)
#  PT023 | for `@pytest.mark.cov` parentheses (as it's unstable/unreliable)
#  TD002 | for TODOs without an author (as an issue should assign ownership)
ignore = ["D100", "D104", "D107", "D203", "D212", "D401", "D402", "E501", "PT001", "PT023", "TD002"]

[tool.ruff.lint.per-file-ignores]
# config.py   |   D401 | ignore imperative mood in docstrings (too unreliable)
# config.py   |   N802 | ignore use of upper case method names
"config.py" = ["D401", "N802"]
# tailwind.py |   N802 | ignore use of upper case method names in config subclass
"tasks/tailwind.py" = ["N802"]
#   tests/*   | ANN201 | ignore public functions
#   tests/*   | ANN401 | ignore use of 'Any' type
#   tests/*   |   D401 | ignore imperative mood in docstrings (too unreliable)
#   tests/*   |   S101 | ignore use of assert
"tests/*" = ["ANN201", "ANN401", "D401", "S101"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.pymarkdown]
plugins.md013.line_length = 120
extensions.markdown-extended-autolinks.enabled = true

[tool.pytest_env]
# `LANTERN_TEMPLATES_SENTRY_SRC` needs to be real to load the Sentry feedback widget
LANTERN_LOG_LEVEL = "INFO"
LANTERN_PARALLEL_JOBS="1"
LANTERN_ENABLE_FEATURE_SENTRY = "false"
LANTERN_SENTRY_ENVIRONMENT = "test"
LANTERN_STORE_GITLAB_ENDPOINT = "https://gitlab.example.com"
LANTERN_STORE_GITLAB_TOKEN='x'
LANTERN_STORE_GITLAB_PROJECT_ID='1234'
LANTERN_STORE_GITLAB_CACHE_PATH='cache'
LANTERN_TEMPLATES_SENTRY_SRC="https://js.sentry-cdn.com/57698b6483c7ac43b7c9c905cdb79943.min.js"
LANTERN_TEMPLATES_PLAUSIBLE_DOMAIN="x"
LANTERN_TEMPLATES_ITEM_CONTACT_ENDPOINT='https://example.com/contact' # must be 'https://example.com/contact'
LANTERN_TEMPLATES_ITEM_VERSIONS_ENDPOINT='x'
LANTERN_EXPORT_PATH="export"
LANTERN_AWS_ACCESS_ID="x"
LANTERN_AWS_ACCESS_SECRET="x"
LANTERN_AWS_S3_BUCKET="x"
LANTERN_VERIFY_SHAREPOINT_PROXY_ENDPOINT="x"

[tool.pytest.ini_options]
# --strict-markers | fail if unknown markers are used
# --random-order   | run tests in random order
# -x               | stop after first failure [Overriden in CI]
# --ff             | run failed tests first
addopts = "--strict-markers --random-order -x --ff"
markers = [
    "cov: coverage checks (deselect with '-m \"not cov\"')",
]

[tool.coverage.report]
skip_empty = true
show_missing = false
fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.run]
branch = true
source = ["src"]
omit = []

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
